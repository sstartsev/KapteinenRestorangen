"use strict";
exports.__esModule = true;
var terrainShader = {
    vertexShader: "\n        varying vec2 vUv;\n        varying float vHeight;\n        varying vec3 vNormal;\n        varying vec3 vPosition;\n        \n        void main() {\n            vUv = uv;\n            vHeight = position.y;\n            vNormal = normalize(normalMatrix * normal);\n            vPosition = position;\n            gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n        }\n    ",
    fragmentShader: "\n        uniform sampler2D sandTexture;\n        uniform sampler2D dirtTexture;\n        uniform sampler2D cobbleTexture;\n        uniform sampler2D grassTexture;\n        uniform sampler2D rocksTexture;\n        uniform sampler2D wornRockTexture;\n        uniform sampler2D snowPackedTexture;\n        uniform sampler2D rockSnowTexture;\n        \n        varying vec2 vUv;\n        varying float vHeight;\n        varying vec3 vNormal;\n        varying vec3 vPosition;\n\n        vec4 triplanarMapping(sampler2D tex, vec3 position, vec3 normal) {\n            vec2 uvX = position.zy * 32.05;\n            vec2 uvY = position.xz * 32.05;\n            vec2 uvZ = position.xy * 0.05;\n\n            vec4 colorX = texture2D(tex, uvX);\n            vec4 colorY = texture2D(tex, uvY);\n            vec4 colorZ = texture2D(tex, uvZ);\n\n            vec3 blend = abs(normal);\n            blend = normalize(max(blend, 0.00001));\n            blend /= dot(blend, vec3(1.0));\n\n            return colorX * blend.x + colorY * blend.y + colorZ * blend.z;\n        }\n\n        vec4 getTextureColor(sampler2D tex) {\n            return triplanarMapping(tex, vPosition, vNormal);\n        }\n\n        vec4 blendTextures(float height) {\n            vec4 sand = getTextureColor(sandTexture);\n            vec4 dirt = getTextureColor(dirtTexture);\n            vec4 cobble = getTextureColor(cobbleTexture);\n            vec4 grass = getTextureColor(grassTexture);\n            vec4 rocks = getTextureColor(rocksTexture);\n            vec4 wornRock = getTextureColor(wornRockTexture);\n            vec4 snowPacked = getTextureColor(snowPackedTexture);\n            vec4 rockSnow = getTextureColor(rockSnowTexture);\n\n            vec4 color;\n            if (height < 2.0) {\n                color = mix(sand, dirt, smoothstep(0.0, 2.0, height));\n            } else if (height < 5.0) {\n                color = mix(dirt, grass, smoothstep(2.0, 5.0, height));\n            } else if (height < 10.0) {\n                color = mix(grass, rocks, smoothstep(5.0, 10.0, height));\n            } else if (height < 15.0) {\n                color = mix(rocks, wornRock, smoothstep(10.0, 15.0, height));\n            } else if (height < 20.0) {\n                color = mix(wornRock, snowPacked, smoothstep(15.0, 20.0, height));\n            } else {\n                color = mix(snowPacked, rockSnow, smoothstep(20.0, 25.0, height));\n            }\n            return color;\n        }\n        \n        void main() {\n            vec4 color = blendTextures(vHeight);\n            gl_FragColor = color;\n        }\n    "
};
exports["default"] = terrainShader;
